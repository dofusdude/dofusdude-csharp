/*
 * dofusdude
 *
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dofusdude.Api.Client;
using Dofusdude.Api.Model;

namespace Dofusdude.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Unregister Almanax Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhooksAlmanaxId(string id, int operationIndex = 0);

        /// <summary>
        /// Unregister Almanax Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksAlmanaxIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Unregister RSS Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhooksRssId(string id, int operationIndex = 0);

        /// <summary>
        /// Unregister RSS Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksRssIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Unregister Twitter Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhooksTwitterId(string id, int operationIndex = 0);

        /// <summary>
        /// Unregister Twitter Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksTwitterIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get Almanax Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        GetMetaWebhooksTwitter200Response GetMetaWebhooksAlmanax(int operationIndex = 0);

        /// <summary>
        /// Get Almanax Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksAlmanaxWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get RSS Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        GetMetaWebhooksTwitter200Response GetMetaWebhooksRss(int operationIndex = 0);

        /// <summary>
        /// Get RSS Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksRssWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Twitter Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        GetMetaWebhooksTwitter200Response GetMetaWebhooksTwitter(int operationIndex = 0);

        /// <summary>
        /// Get Twitter Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksTwitterWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Almanax Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxWebhook</returns>
        AlmanaxWebhook GetWebhooksAlmanaxId(string id, int operationIndex = 0);

        /// <summary>
        /// Get Almanax Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxWebhook</returns>
        ApiResponse<AlmanaxWebhook> GetWebhooksAlmanaxIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get RSS Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing RSS Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RssWebhook</returns>
        RssWebhook GetWebhooksRssId(string id, int operationIndex = 0);

        /// <summary>
        /// Get RSS Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing RSS Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RssWebhook</returns>
        ApiResponse<RssWebhook> GetWebhooksRssIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get Twitter Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwitterWebhook</returns>
        TwitterWebhook GetWebhooksTwitterId(string id, int operationIndex = 0);

        /// <summary>
        /// Get Twitter Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwitterWebhook</returns>
        ApiResponse<TwitterWebhook> GetWebhooksTwitterIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Register Almanax Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Almanax updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostWebhooksAlmanax(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0);

        /// <summary>
        /// Register Almanax Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Almanax updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostWebhooksAlmanaxWithHttpInfo(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0);
        /// <summary>
        /// Register RSS Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post RSS news as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostWebhooksRss(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0);

        /// <summary>
        /// Register RSS Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post RSS news as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostWebhooksRssWithHttpInfo(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0);
        /// <summary>
        /// Register Twitter Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostWebhooksTwitter(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0);

        /// <summary>
        /// Register Twitter Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostWebhooksTwitterWithHttpInfo(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0);
        /// <summary>
        /// Update Almanax Hook
        /// </summary>
        /// <remarks>
        /// Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxWebhook</returns>
        AlmanaxWebhook PutWebhooksAlmanaxId(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0);

        /// <summary>
        /// Update Almanax Hook
        /// </summary>
        /// <remarks>
        /// Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxWebhook</returns>
        ApiResponse<AlmanaxWebhook> PutWebhooksAlmanaxIdWithHttpInfo(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0);
        /// <summary>
        /// Update RSS Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RssWebhook</returns>
        RssWebhook PutWebhooksRssId(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0);

        /// <summary>
        /// Update RSS Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RssWebhook</returns>
        ApiResponse<RssWebhook> PutWebhooksRssIdWithHttpInfo(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0);
        /// <summary>
        /// Update Twitter Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwitterWebhook</returns>
        TwitterWebhook PutWebhooksTwitterId(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0);

        /// <summary>
        /// Update Twitter Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwitterWebhook</returns>
        ApiResponse<TwitterWebhook> PutWebhooksTwitterIdWithHttpInfo(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Unregister Almanax Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksAlmanaxIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unregister Almanax Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksAlmanaxIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unregister RSS Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksRssIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unregister RSS Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksRssIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unregister Twitter Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksTwitterIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unregister Twitter Hook
        /// </summary>
        /// <remarks>
        /// Delete a Webhook from the service.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksTwitterIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Almanax Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksAlmanaxAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Almanax Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksAlmanaxWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get RSS Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksRssAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get RSS Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksRssWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Twitter Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksTwitterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Twitter Hook Metainfo
        /// </summary>
        /// <remarks>
        /// Get a list of all available subscriptions. 
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksTwitterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Almanax Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxWebhook</returns>
        System.Threading.Tasks.Task<AlmanaxWebhook> GetWebhooksAlmanaxIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Almanax Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlmanaxWebhook>> GetWebhooksAlmanaxIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get RSS Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing RSS Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RssWebhook</returns>
        System.Threading.Tasks.Task<RssWebhook> GetWebhooksRssIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get RSS Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing RSS Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RssWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RssWebhook>> GetWebhooksRssIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Twitter Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwitterWebhook</returns>
        System.Threading.Tasks.Task<TwitterWebhook> GetWebhooksTwitterIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Twitter Hook
        /// </summary>
        /// <remarks>
        /// Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwitterWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwitterWebhook>> GetWebhooksTwitterIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Register Almanax Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Almanax updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostWebhooksAlmanaxAsync(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Register Almanax Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Almanax updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostWebhooksAlmanaxWithHttpInfoAsync(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Register RSS Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post RSS news as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostWebhooksRssAsync(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Register RSS Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post RSS news as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostWebhooksRssWithHttpInfoAsync(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Register Twitter Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostWebhooksTwitterAsync(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Register Twitter Hook
        /// </summary>
        /// <remarks>
        /// Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostWebhooksTwitterWithHttpInfoAsync(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Almanax Hook
        /// </summary>
        /// <remarks>
        /// Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxWebhook</returns>
        System.Threading.Tasks.Task<AlmanaxWebhook> PutWebhooksAlmanaxIdAsync(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Almanax Hook
        /// </summary>
        /// <remarks>
        /// Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlmanaxWebhook>> PutWebhooksAlmanaxIdWithHttpInfoAsync(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update RSS Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RssWebhook</returns>
        System.Threading.Tasks.Task<RssWebhook> PutWebhooksRssIdAsync(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update RSS Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RssWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<RssWebhook>> PutWebhooksRssIdWithHttpInfoAsync(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Twitter Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwitterWebhook</returns>
        System.Threading.Tasks.Task<TwitterWebhook> PutWebhooksTwitterIdAsync(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Twitter Hook
        /// </summary>
        /// <remarks>
        /// Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwitterWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<TwitterWebhook>> PutWebhooksTwitterIdWithHttpInfoAsync(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private Dofusdude.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                new Dofusdude.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Dofusdude.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(Dofusdude.Api.Client.ISynchronousClient client, Dofusdude.Api.Client.IAsynchronousClient asyncClient, Dofusdude.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dofusdude.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dofusdude.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dofusdude.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dofusdude.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Unregister Almanax Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhooksAlmanaxId(string id, int operationIndex = 0)
        {
            DeleteWebhooksAlmanaxIdWithHttpInfo(id);
        }

        /// <summary>
        /// Unregister Almanax Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> DeleteWebhooksAlmanaxIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksAlmanaxId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister Almanax Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksAlmanaxIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteWebhooksAlmanaxIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unregister Almanax Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> DeleteWebhooksAlmanaxIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksAlmanaxId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister RSS Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhooksRssId(string id, int operationIndex = 0)
        {
            DeleteWebhooksRssIdWithHttpInfo(id);
        }

        /// <summary>
        /// Unregister RSS Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> DeleteWebhooksRssIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksRssId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister RSS Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksRssIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteWebhooksRssIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unregister RSS Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> DeleteWebhooksRssIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksRssId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister Twitter Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhooksTwitterId(string id, int operationIndex = 0)
        {
            DeleteWebhooksTwitterIdWithHttpInfo(id);
        }

        /// <summary>
        /// Unregister Twitter Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> DeleteWebhooksTwitterIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksTwitterId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unregister Twitter Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksTwitterIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteWebhooksTwitterIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unregister Twitter Hook Delete a Webhook from the service.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> DeleteWebhooksTwitterIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhooksTwitterId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Almanax Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        public GetMetaWebhooksTwitter200Response GetMetaWebhooksAlmanax(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = GetMetaWebhooksAlmanaxWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Almanax Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        public Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksAlmanaxWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksAlmanax";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetaWebhooksTwitter200Response>("/meta/webhooks/almanax", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksAlmanax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Almanax Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        public async System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksAlmanaxAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = await GetMetaWebhooksAlmanaxWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Almanax Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksAlmanaxWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksAlmanax";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetaWebhooksTwitter200Response>("/meta/webhooks/almanax", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksAlmanax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get RSS Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        public GetMetaWebhooksTwitter200Response GetMetaWebhooksRss(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = GetMetaWebhooksRssWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RSS Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        public Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksRssWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksRss";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetaWebhooksTwitter200Response>("/meta/webhooks/rss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksRss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get RSS Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        public async System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksRssAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = await GetMetaWebhooksRssWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RSS Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksRssWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksRss";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetaWebhooksTwitter200Response>("/meta/webhooks/rss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksRss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Twitter Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetaWebhooksTwitter200Response</returns>
        public GetMetaWebhooksTwitter200Response GetMetaWebhooksTwitter(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = GetMetaWebhooksTwitterWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Twitter Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetaWebhooksTwitter200Response</returns>
        public Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> GetMetaWebhooksTwitterWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksTwitter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetaWebhooksTwitter200Response>("/meta/webhooks/twitter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksTwitter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Twitter Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetaWebhooksTwitter200Response</returns>
        public async System.Threading.Tasks.Task<GetMetaWebhooksTwitter200Response> GetMetaWebhooksTwitterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response> localVarResponse = await GetMetaWebhooksTwitterWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Twitter Hook Metainfo Get a list of all available subscriptions. 
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetaWebhooksTwitter200Response)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<GetMetaWebhooksTwitter200Response>> GetMetaWebhooksTwitterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhooksApi.GetMetaWebhooksTwitter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetaWebhooksTwitter200Response>("/meta/webhooks/twitter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaWebhooksTwitter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Almanax Hook Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxWebhook</returns>
        public AlmanaxWebhook GetWebhooksAlmanaxId(string id, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> localVarResponse = GetWebhooksAlmanaxIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Almanax Hook Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> GetWebhooksAlmanaxIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksAlmanaxId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlmanaxWebhook>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Almanax Hook Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxWebhook</returns>
        public async System.Threading.Tasks.Task<AlmanaxWebhook> GetWebhooksAlmanaxIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> localVarResponse = await GetWebhooksAlmanaxIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Almanax Hook Retrieve details about an existing Almanax Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook>> GetWebhooksAlmanaxIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksAlmanaxId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlmanaxWebhook>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get RSS Hook Retrieve details about an existing RSS Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RssWebhook</returns>
        public RssWebhook GetWebhooksRssId(string id, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<RssWebhook> localVarResponse = GetWebhooksRssIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RSS Hook Retrieve details about an existing RSS Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RssWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<RssWebhook> GetWebhooksRssIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksRssId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RssWebhook>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get RSS Hook Retrieve details about an existing RSS Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RssWebhook</returns>
        public async System.Threading.Tasks.Task<RssWebhook> GetWebhooksRssIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<RssWebhook> localVarResponse = await GetWebhooksRssIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get RSS Hook Retrieve details about an existing RSS Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RssWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<RssWebhook>> GetWebhooksRssIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksRssId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RssWebhook>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Twitter Hook Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwitterWebhook</returns>
        public TwitterWebhook GetWebhooksTwitterId(string id, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<TwitterWebhook> localVarResponse = GetWebhooksTwitterIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Twitter Hook Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwitterWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<TwitterWebhook> GetWebhooksTwitterIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksTwitterId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TwitterWebhook>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Twitter Hook Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwitterWebhook</returns>
        public async System.Threading.Tasks.Task<TwitterWebhook> GetWebhooksTwitterIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<TwitterWebhook> localVarResponse = await GetWebhooksTwitterIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Twitter Hook Retrieve details about an existing Twitter Webhook with a given uuid.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwitterWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<TwitterWebhook>> GetWebhooksTwitterIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhooksTwitterId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TwitterWebhook>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Almanax Hook Register a new Webhook to post Almanax updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostWebhooksAlmanax(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0)
        {
            PostWebhooksAlmanaxWithHttpInfo(createAlmanaxWebhook);
        }

        /// <summary>
        /// Register Almanax Hook Register a new Webhook to post Almanax updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> PostWebhooksAlmanaxWithHttpInfo(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAlmanaxWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksAlmanax";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/webhooks/almanax", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksAlmanax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Almanax Hook Register a new Webhook to post Almanax updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostWebhooksAlmanaxAsync(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostWebhooksAlmanaxWithHttpInfoAsync(createAlmanaxWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register Almanax Hook Register a new Webhook to post Almanax updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> PostWebhooksAlmanaxWithHttpInfoAsync(CreateAlmanaxWebhook? createAlmanaxWebhook = default(CreateAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAlmanaxWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksAlmanax";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/webhooks/almanax", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksAlmanax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register RSS Hook Register a new Webhook to post RSS news as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostWebhooksRss(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0)
        {
            PostWebhooksRssWithHttpInfo(createRSSWebhook);
        }

        /// <summary>
        /// Register RSS Hook Register a new Webhook to post RSS news as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> PostWebhooksRssWithHttpInfo(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createRSSWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksRss";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/webhooks/rss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksRss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register RSS Hook Register a new Webhook to post RSS news as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostWebhooksRssAsync(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostWebhooksRssWithHttpInfoAsync(createRSSWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register RSS Hook Register a new Webhook to post RSS news as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> PostWebhooksRssWithHttpInfoAsync(CreateRSSWebhook? createRSSWebhook = default(CreateRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createRSSWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksRss";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/webhooks/rss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksRss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Twitter Hook Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostWebhooksTwitter(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0)
        {
            PostWebhooksTwitterWithHttpInfo(createTwitterWebhook);
        }

        /// <summary>
        /// Register Twitter Hook Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dofusdude.Api.Client.ApiResponse<Object> PostWebhooksTwitterWithHttpInfo(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTwitterWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksTwitter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/webhooks/twitter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksTwitter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Twitter Hook Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostWebhooksTwitterAsync(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostWebhooksTwitterWithHttpInfoAsync(createTwitterWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register Twitter Hook Register a new Webhook to post Twitter updates as soon as they are posted.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Object>> PostWebhooksTwitterWithHttpInfoAsync(CreateTwitterWebhook? createTwitterWebhook = default(CreateTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTwitterWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PostWebhooksTwitter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/webhooks/twitter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWebhooksTwitter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Almanax Hook Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxWebhook</returns>
        public AlmanaxWebhook PutWebhooksAlmanaxId(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> localVarResponse = PutWebhooksAlmanaxIdWithHttpInfo(id, putAlmanaxWebhook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Almanax Hook Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> PutWebhooksAlmanaxIdWithHttpInfo(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksAlmanaxId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putAlmanaxWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AlmanaxWebhook>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Almanax Hook Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxWebhook</returns>
        public async System.Threading.Tasks.Task<AlmanaxWebhook> PutWebhooksAlmanaxIdAsync(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook> localVarResponse = await PutWebhooksAlmanaxIdWithHttpInfoAsync(id, putAlmanaxWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Almanax Hook Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putAlmanaxWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<AlmanaxWebhook>> PutWebhooksAlmanaxIdWithHttpInfoAsync(string id, PutAlmanaxWebhook? putAlmanaxWebhook = default(PutAlmanaxWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksAlmanaxId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putAlmanaxWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksAlmanaxId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AlmanaxWebhook>("/webhooks/almanax/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksAlmanaxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update RSS Hook Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RssWebhook</returns>
        public RssWebhook PutWebhooksRssId(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<RssWebhook> localVarResponse = PutWebhooksRssIdWithHttpInfo(id, putRSSWebhook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update RSS Hook Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RssWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<RssWebhook> PutWebhooksRssIdWithHttpInfo(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksRssId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putRSSWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RssWebhook>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update RSS Hook Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RssWebhook</returns>
        public async System.Threading.Tasks.Task<RssWebhook> PutWebhooksRssIdAsync(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<RssWebhook> localVarResponse = await PutWebhooksRssIdWithHttpInfoAsync(id, putRSSWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update RSS Hook Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putRSSWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RssWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<RssWebhook>> PutWebhooksRssIdWithHttpInfoAsync(string id, PutRSSWebhook? putRSSWebhook = default(PutRSSWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksRssId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putRSSWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksRssId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RssWebhook>("/webhooks/rss/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksRssId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Twitter Hook Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TwitterWebhook</returns>
        public TwitterWebhook PutWebhooksTwitterId(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<TwitterWebhook> localVarResponse = PutWebhooksTwitterIdWithHttpInfo(id, putTwitterWebhook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Twitter Hook Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TwitterWebhook</returns>
        public Dofusdude.Api.Client.ApiResponse<TwitterWebhook> PutWebhooksTwitterIdWithHttpInfo(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksTwitterId");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putTwitterWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<TwitterWebhook>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Twitter Hook Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TwitterWebhook</returns>
        public async System.Threading.Tasks.Task<TwitterWebhook> PutWebhooksTwitterIdAsync(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<TwitterWebhook> localVarResponse = await PutWebhooksTwitterIdWithHttpInfoAsync(id, putTwitterWebhook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Twitter Hook Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the ID returned from the API when creating the webhook</param>
        /// <param name="putTwitterWebhook"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TwitterWebhook)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<TwitterWebhook>> PutWebhooksTwitterIdWithHttpInfoAsync(string id, PutTwitterWebhook? putTwitterWebhook = default(PutTwitterWebhook?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->PutWebhooksTwitterId");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dofusdude.Api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putTwitterWebhook;

            localVarRequestOptions.Operation = "WebhooksApi.PutWebhooksTwitterId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TwitterWebhook>("/webhooks/twitter/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksTwitterId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
