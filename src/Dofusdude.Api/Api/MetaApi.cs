/*
 * dofusdude
 *
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.7
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dofusdude.Api.Client;
using Dofusdude.Api.Model;

namespace Dofusdude.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Available Game Search Types
        /// </summary>
        /// <remarks>
        /// Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetGameSearchTypes(int operationIndex = 0);

        /// <summary>
        /// Available Game Search Types
        /// </summary>
        /// <remarks>
        /// Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetGameSearchTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Available Item Types
        /// </summary>
        /// <remarks>
        /// Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetItemTypes(int operationIndex = 0);

        /// <summary>
        /// Available Item Types
        /// </summary>
        /// <remarks>
        /// Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetItemTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        List<GetMetaAlmanaxBonuses200ResponseInner> GetMetaAlmanaxBonuses(string language, int operationIndex = 0);

        /// <summary>
        /// Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesWithHttpInfo(string language, int operationIndex = 0);
        /// <summary>
        /// Search Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        List<GetMetaAlmanaxBonuses200ResponseInner> GetMetaAlmanaxBonusesSearch(string language, string query, int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesSearchWithHttpInfo(string language, string query, int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Effects and Condition Elements
        /// </summary>
        /// <remarks>
        /// Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetMetaElements(int operationIndex = 0);

        /// <summary>
        /// Effects and Condition Elements
        /// </summary>
        /// <remarks>
        /// Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetMetaElementsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Game Version
        /// </summary>
        /// <remarks>
        /// The current game version of the hosted data.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        ModelVersion GetMetaVersion(string game, int operationIndex = 0);

        /// <summary>
        /// Game Version
        /// </summary>
        /// <remarks>
        /// The current game version of the hosted data.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        ApiResponse<ModelVersion> GetMetaVersionWithHttpInfo(string game, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Available Game Search Types
        /// </summary>
        /// <remarks>
        /// Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetGameSearchTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Available Game Search Types
        /// </summary>
        /// <remarks>
        /// Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetGameSearchTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Available Item Types
        /// </summary>
        /// <remarks>
        /// Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetItemTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Available Item Types
        /// </summary>
        /// <remarks>
        /// Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetItemTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesAsync(string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>>> GetMetaAlmanaxBonusesWithHttpInfoAsync(string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesSearchAsync(string language, string query, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search Available Almanax Bonuses
        /// </summary>
        /// <remarks>
        /// Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>>> GetMetaAlmanaxBonusesSearchWithHttpInfoAsync(string language, string query, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Effects and Condition Elements
        /// </summary>
        /// <remarks>
        /// Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetMetaElementsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Effects and Condition Elements
        /// </summary>
        /// <remarks>
        /// Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetMetaElementsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Game Version
        /// </summary>
        /// <remarks>
        /// The current game version of the hosted data.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelVersion</returns>
        System.Threading.Tasks.Task<ModelVersion> GetMetaVersionAsync(string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Game Version
        /// </summary>
        /// <remarks>
        /// The current game version of the hosted data.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelVersion>> GetMetaVersionWithHttpInfoAsync(string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApi : IMetaApiSync, IMetaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetaApi : IMetaApi
    {
        private Dofusdude.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi(string basePath)
        {
            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                new Dofusdude.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetaApi(Dofusdude.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetaApi(Dofusdude.Api.Client.ISynchronousClient client, Dofusdude.Api.Client.IAsynchronousClient asyncClient, Dofusdude.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dofusdude.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dofusdude.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dofusdude.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dofusdude.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Available Game Search Types Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetGameSearchTypes(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = GetGameSearchTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Game Search Types Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<string>> GetGameSearchTypesWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetGameSearchTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/dofus3beta/v1/meta/search/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameSearchTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Game Search Types Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetGameSearchTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = await GetGameSearchTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Game Search Types Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<string>>> GetGameSearchTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetGameSearchTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/dofus3beta/v1/meta/search/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameSearchTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Item Types Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetItemTypes(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = GetItemTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Item Types Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<string>> GetItemTypesWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetItemTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/dofus3beta/v1/meta/items/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Item Types Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetItemTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = await GetItemTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Item Types Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints. All names are english for comparing them inside applications. Ordering is not guaranteed to persist with game updates.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<string>>> GetItemTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetItemTypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/dofus3beta/v1/meta/items/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Almanax Bonuses Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public List<GetMetaAlmanaxBonuses200ResponseInner> GetMetaAlmanaxBonuses(string language, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> localVarResponse = GetMetaAlmanaxBonusesWithHttpInfo(language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Almanax Bonuses Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesWithHttpInfo(string language, int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling MetaApi->GetMetaAlmanaxBonuses");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter

            localVarRequestOptions.Operation = "MetaApi.GetMetaAlmanaxBonuses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetMetaAlmanaxBonuses200ResponseInner>>("/dofus2/meta/{language}/almanax/bonuses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaAlmanaxBonuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Available Almanax Bonuses Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesAsync(string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> localVarResponse = await GetMetaAlmanaxBonusesWithHttpInfoAsync(language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Available Almanax Bonuses Get all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>>> GetMetaAlmanaxBonusesWithHttpInfoAsync(string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling MetaApi->GetMetaAlmanaxBonuses");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter

            localVarRequestOptions.Operation = "MetaApi.GetMetaAlmanaxBonuses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetMetaAlmanaxBonuses200ResponseInner>>("/dofus2/meta/{language}/almanax/bonuses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaAlmanaxBonuses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Available Almanax Bonuses Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public List<GetMetaAlmanaxBonuses200ResponseInner> GetMetaAlmanaxBonusesSearch(string language, string query, int? limit = default(int?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> localVarResponse = GetMetaAlmanaxBonusesSearchWithHttpInfo(language, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Available Almanax Bonuses Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesSearchWithHttpInfo(string language, string query, int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling MetaApi->GetMetaAlmanaxBonusesSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling MetaApi->GetMetaAlmanaxBonusesSearch");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MetaApi.GetMetaAlmanaxBonusesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetMetaAlmanaxBonuses200ResponseInner>>("/dofus2/meta/{language}/almanax/bonuses/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaAlmanaxBonusesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Available Almanax Bonuses Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetMetaAlmanaxBonuses200ResponseInner>> GetMetaAlmanaxBonusesSearchAsync(string language, string query, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>> localVarResponse = await GetMetaAlmanaxBonusesSearchWithHttpInfoAsync(language, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Available Almanax Bonuses Search all the available bonuses and their id for filtering them in the range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="limit">maximum number of returned results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetMetaAlmanaxBonuses200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<GetMetaAlmanaxBonuses200ResponseInner>>> GetMetaAlmanaxBonusesSearchWithHttpInfoAsync(string language, string query, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling MetaApi->GetMetaAlmanaxBonusesSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling MetaApi->GetMetaAlmanaxBonusesSearch");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MetaApi.GetMetaAlmanaxBonusesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetMetaAlmanaxBonuses200ResponseInner>>("/dofus2/meta/{language}/almanax/bonuses/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaAlmanaxBonusesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Effects and Condition Elements Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetMetaElements(int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = GetMetaElementsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Effects and Condition Elements Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<string>> GetMetaElementsWithHttpInfo(int operationIndex = 0)
        {
            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetMetaElements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/dofus3beta/v1/meta/elements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Effects and Condition Elements Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetMetaElementsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<string>> localVarResponse = await GetMetaElementsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Effects and Condition Elements Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<string>>> GetMetaElementsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetaApi.GetMetaElements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/dofus3beta/v1/meta/elements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaElements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Game Version The current game version of the hosted data.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelVersion</returns>
        public ModelVersion GetMetaVersion(string game, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<ModelVersion> localVarResponse = GetMetaVersionWithHttpInfo(game);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Game Version The current game version of the hosted data.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelVersion</returns>
        public Dofusdude.Api.Client.ApiResponse<ModelVersion> GetMetaVersionWithHttpInfo(string game, int operationIndex = 0)
        {
            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling MetaApi->GetMetaVersion");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "MetaApi.GetMetaVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelVersion>("/{game}/v1/meta/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Game Version The current game version of the hosted data.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelVersion</returns>
        public async System.Threading.Tasks.Task<ModelVersion> GetMetaVersionAsync(string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<ModelVersion> localVarResponse = await GetMetaVersionWithHttpInfoAsync(game, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Game Version The current game version of the hosted data.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelVersion)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<ModelVersion>> GetMetaVersionWithHttpInfoAsync(string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling MetaApi->GetMetaVersion");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "MetaApi.GetMetaVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelVersion>("/{game}/v1/meta/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
