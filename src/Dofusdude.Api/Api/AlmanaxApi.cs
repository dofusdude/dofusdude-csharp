/*
 * dofusdude
 *
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [PHP](https://github.com/dofusdude/dofusdude-php) - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dofusdude.Api.Client;
using Dofusdude.Api.Model;

namespace Dofusdude.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlmanaxApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Single Almanax Date
        /// </summary>
        /// <remarks>
        /// Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxEntry</returns>
        AlmanaxEntry GetAlmanaxDate(string language, DateOnly date, int operationIndex = 0);

        /// <summary>
        /// Single Almanax Date
        /// </summary>
        /// <remarks>
        /// Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxEntry</returns>
        ApiResponse<AlmanaxEntry> GetAlmanaxDateWithHttpInfo(string language, DateOnly date, int operationIndex = 0);
        /// <summary>
        /// Almanax Range
        /// </summary>
        /// <remarks>
        /// Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlmanaxEntry&gt;</returns>
        List<AlmanaxEntry> GetAlmanaxRange(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0);

        /// <summary>
        /// Almanax Range
        /// </summary>
        /// <remarks>
        /// Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlmanaxEntry&gt;</returns>
        ApiResponse<List<AlmanaxEntry>> GetAlmanaxRangeWithHttpInfo(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlmanaxApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Single Almanax Date
        /// </summary>
        /// <remarks>
        /// Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxEntry</returns>
        System.Threading.Tasks.Task<AlmanaxEntry> GetAlmanaxDateAsync(string language, DateOnly date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single Almanax Date
        /// </summary>
        /// <remarks>
        /// Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlmanaxEntry>> GetAlmanaxDateWithHttpInfoAsync(string language, DateOnly date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Almanax Range
        /// </summary>
        /// <remarks>
        /// Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlmanaxEntry&gt;</returns>
        System.Threading.Tasks.Task<List<AlmanaxEntry>> GetAlmanaxRangeAsync(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Almanax Range
        /// </summary>
        /// <remarks>
        /// Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlmanaxEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlmanaxEntry>>> GetAlmanaxRangeWithHttpInfoAsync(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlmanaxApi : IAlmanaxApiSync, IAlmanaxApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlmanaxApi : IAlmanaxApi
    {
        private Dofusdude.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlmanaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlmanaxApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlmanaxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlmanaxApi(string basePath)
        {
            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                new Dofusdude.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlmanaxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlmanaxApi(Dofusdude.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlmanaxApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AlmanaxApi(Dofusdude.Api.Client.ISynchronousClient client, Dofusdude.Api.Client.IAsynchronousClient asyncClient, Dofusdude.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dofusdude.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dofusdude.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dofusdude.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dofusdude.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Single Almanax Date Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlmanaxEntry</returns>
        public AlmanaxEntry GetAlmanaxDate(string language, DateOnly date, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxEntry> localVarResponse = GetAlmanaxDateWithHttpInfo(language, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Almanax Date Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlmanaxEntry</returns>
        public Dofusdude.Api.Client.ApiResponse<AlmanaxEntry> GetAlmanaxDateWithHttpInfo(string language, DateOnly date, int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling AlmanaxApi->GetAlmanaxDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'date' when calling AlmanaxApi->GetAlmanaxDate");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", Dofusdude.Api.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "AlmanaxApi.GetAlmanaxDate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlmanaxEntry>("/dofus2/{language}/almanax/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlmanaxDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single Almanax Date Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlmanaxEntry</returns>
        public async System.Threading.Tasks.Task<AlmanaxEntry> GetAlmanaxDateAsync(string language, DateOnly date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<AlmanaxEntry> localVarResponse = await GetAlmanaxDateWithHttpInfoAsync(language, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Almanax Date Get a single date. There are not more details in the returned object than the normal range endpoint.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="date">yyyy-mm-dd</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlmanaxEntry)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<AlmanaxEntry>> GetAlmanaxDateWithHttpInfoAsync(string language, DateOnly date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling AlmanaxApi->GetAlmanaxDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'date' when calling AlmanaxApi->GetAlmanaxDate");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", Dofusdude.Api.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "AlmanaxApi.GetAlmanaxDate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlmanaxEntry>("/dofus2/{language}/almanax/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlmanaxDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Almanax Range Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlmanaxEntry&gt;</returns>
        public List<AlmanaxEntry> GetAlmanaxRange(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<AlmanaxEntry>> localVarResponse = GetAlmanaxRangeWithHttpInfo(language, filterBonusType, rangeFrom, rangeTo, rangeSize, timezone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Almanax Range Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlmanaxEntry&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<AlmanaxEntry>> GetAlmanaxRangeWithHttpInfo(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling AlmanaxApi->GetAlmanaxRange");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            if (filterBonusType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[bonus_type]", filterBonusType));
            }
            if (rangeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[from]", rangeFrom));
            }
            if (rangeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[to]", rangeTo));
            }
            if (rangeSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[size]", rangeSize));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            localVarRequestOptions.Operation = "AlmanaxApi.GetAlmanaxRange";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AlmanaxEntry>>("/dofus2/{language}/almanax", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlmanaxRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Almanax Range Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlmanaxEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlmanaxEntry>> GetAlmanaxRangeAsync(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<AlmanaxEntry>> localVarResponse = await GetAlmanaxRangeWithHttpInfoAsync(language, filterBonusType, rangeFrom, rangeTo, rangeSize, timezone, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Almanax Range Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] &#x3D; inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">code</param>
        /// <param name="filterBonusType">ids from meta/{language}/almanax/bonuses (optional)</param>
        /// <param name="rangeFrom">yyyy-mm-dd (optional)</param>
        /// <param name="rangeTo">yyyy-mm-dd (optional)</param>
        /// <param name="rangeSize">size of the returned range (optional)</param>
        /// <param name="timezone">determine what the current time is. If you live in Brazil, \&quot;today\&quot; will be hours apart from Paris. Use your timezone to get results relative to your location. (optional, default to &quot;Europe/Paris&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlmanaxEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<AlmanaxEntry>>> GetAlmanaxRangeWithHttpInfoAsync(string language, string? filterBonusType = default(string?), DateOnly? rangeFrom = default(DateOnly?), DateOnly? rangeTo = default(DateOnly?), int? rangeSize = default(int?), string? timezone = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling AlmanaxApi->GetAlmanaxRange");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            if (filterBonusType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[bonus_type]", filterBonusType));
            }
            if (rangeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[from]", rangeFrom));
            }
            if (rangeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[to]", rangeTo));
            }
            if (rangeSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "range[size]", rangeSize));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }

            localVarRequestOptions.Operation = "AlmanaxApi.GetAlmanaxRange";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AlmanaxEntry>>("/dofus2/{language}/almanax", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlmanaxRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
