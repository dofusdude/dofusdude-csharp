/*
 * dofusdude
 *
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.5
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dofusdude.Api.Client;
using Dofusdude.Api.Model;

namespace Dofusdude.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICosmeticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List All Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListItems</returns>
        ListItems GetAllCosmeticsList(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// List All Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListItems</returns>
        ApiResponse<ListItems> GetAllCosmeticsListWithHttpInfo(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// List Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a list of cosmetic items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListItems</returns>
        ListItems GetCosmeticsList(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// List Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a list of cosmetic items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListItems</returns>
        ApiResponse<ListItems> GetCosmeticsListWithHttpInfo(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Search Cosmetics
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of cosmetic items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ListItem&gt;</returns>
        List<ListItem> GetCosmeticsSearch(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Search Cosmetics
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of cosmetic items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ListItem&gt;</returns>
        ApiResponse<List<ListItem>> GetCosmeticsSearchWithHttpInfo(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Single Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a specific cosmetic item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Equipment</returns>
        Equipment GetCosmeticsSingle(string language, int ankamaId, string game, int operationIndex = 0);

        /// <summary>
        /// Single Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a specific cosmetic item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Equipment</returns>
        ApiResponse<Equipment> GetCosmeticsSingleWithHttpInfo(string language, int ankamaId, string game, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICosmeticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List All Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItems</returns>
        System.Threading.Tasks.Task<ListItems> GetAllCosmeticsListAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List All Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListItems>> GetAllCosmeticsListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a list of cosmetic items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItems</returns>
        System.Threading.Tasks.Task<ListItems> GetCosmeticsListAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a list of cosmetic items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListItems>> GetCosmeticsListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search Cosmetics
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of cosmetic items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListItem&gt;</returns>
        System.Threading.Tasks.Task<List<ListItem>> GetCosmeticsSearchAsync(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search Cosmetics
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of cosmetic items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListItem>>> GetCosmeticsSearchWithHttpInfoAsync(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Single Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a specific cosmetic item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Equipment</returns>
        System.Threading.Tasks.Task<Equipment> GetCosmeticsSingleAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Single Cosmetics
        /// </summary>
        /// <remarks>
        /// Retrieve a specific cosmetic item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Equipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Equipment>> GetCosmeticsSingleWithHttpInfoAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICosmeticsApi : ICosmeticsApiSync, ICosmeticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CosmeticsApi : ICosmeticsApi
    {
        private Dofusdude.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CosmeticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CosmeticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CosmeticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CosmeticsApi(string basePath)
        {
            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                new Dofusdude.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CosmeticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CosmeticsApi(Dofusdude.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CosmeticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CosmeticsApi(Dofusdude.Api.Client.ISynchronousClient client, Dofusdude.Api.Client.IAsynchronousClient asyncClient, Dofusdude.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dofusdude.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dofusdude.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dofusdude.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dofusdude.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List All Cosmetics Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListItems</returns>
        public ListItems GetAllCosmeticsList(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<ListItems> localVarResponse = GetAllCosmeticsListWithHttpInfo(language, game, sortLevel, filterMinLevel, filterMaxLevel, acceptEncoding, filterTypeNameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Cosmetics Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListItems</returns>
        public Dofusdude.Api.Client.ApiResponse<ListItems> GetAllCosmeticsListWithHttpInfo(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetAllCosmeticsList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetAllCosmeticsList");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", Dofusdude.Api.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetAllCosmeticsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListItems>("/{game}/v1/{language}/items/cosmetics/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCosmeticsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Cosmetics Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItems</returns>
        public async System.Threading.Tasks.Task<ListItems> GetAllCosmeticsListAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<ListItems> localVarResponse = await GetAllCosmeticsListWithHttpInfoAsync(language, game, sortLevel, filterMinLevel, filterMaxLevel, acceptEncoding, filterTypeNameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Cosmetics Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItems)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<ListItems>> GetAllCosmeticsListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetAllCosmeticsList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetAllCosmeticsList");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", Dofusdude.Api.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetAllCosmeticsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListItems>("/{game}/v1/{language}/items/cosmetics/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCosmeticsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cosmetics Retrieve a list of cosmetic items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListItems</returns>
        public ListItems GetCosmeticsList(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<ListItems> localVarResponse = GetCosmeticsListWithHttpInfo(language, game, sortLevel, filterMinLevel, filterMaxLevel, pageSize, pageNumber, fieldsItem, filterTypeNameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cosmetics Retrieve a list of cosmetic items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListItems</returns>
        public Dofusdude.Api.Client.ApiResponse<ListItems> GetCosmeticsListWithHttpInfo(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsList");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[size]", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[number]", pageNumber));
            }
            if (fieldsItem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "fields[item]", fieldsItem));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListItems>("/{game}/v1/{language}/items/cosmetics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Cosmetics Retrieve a list of cosmetic items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListItems</returns>
        public async System.Threading.Tasks.Task<ListItems> GetCosmeticsListAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<ListItems> localVarResponse = await GetCosmeticsListWithHttpInfoAsync(language, game, sortLevel, filterMinLevel, filterMaxLevel, pageSize, pageNumber, fieldsItem, filterTypeNameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Cosmetics Retrieve a list of cosmetic items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListItems)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<ListItems>> GetCosmeticsListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsList");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[size]", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[number]", pageNumber));
            }
            if (fieldsItem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "fields[item]", fieldsItem));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListItems>("/{game}/v1/{language}/items/cosmetics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Cosmetics Search in all names and descriptions of cosmetic items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ListItem&gt;</returns>
        public List<ListItem> GetCosmeticsSearch(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<ListItem>> localVarResponse = GetCosmeticsSearchWithHttpInfo(language, game, query, filterMinLevel, filterMaxLevel, limit, filterTypeNameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Cosmetics Search in all names and descriptions of cosmetic items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ListItem&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<ListItem>> GetCosmeticsSearchWithHttpInfo(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsSearch");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling CosmeticsApi->GetCosmeticsSearch");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ListItem>>("/{game}/v1/{language}/items/cosmetics/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Cosmetics Search in all names and descriptions of cosmetic items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ListItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListItem>> GetCosmeticsSearchAsync(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<ListItem>> localVarResponse = await GetCosmeticsSearchWithHttpInfoAsync(language, game, query, filterMinLevel, filterMaxLevel, limit, filterTypeNameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Cosmetics Search in all names and descriptions of cosmetic items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeNameId">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ListItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<ListItem>>> GetCosmeticsSearchWithHttpInfoAsync(string language, string game, string query, int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeNameId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsSearch");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling CosmeticsApi->GetCosmeticsSearch");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterTypeNameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type.name_id]", filterTypeNameId));
            }

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ListItem>>("/{game}/v1/{language}/items/cosmetics/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single Cosmetics Retrieve a specific cosmetic item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Equipment</returns>
        public Equipment GetCosmeticsSingle(string language, int ankamaId, string game, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<Equipment> localVarResponse = GetCosmeticsSingleWithHttpInfo(language, ankamaId, game);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Cosmetics Retrieve a specific cosmetic item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Equipment</returns>
        public Dofusdude.Api.Client.ApiResponse<Equipment> GetCosmeticsSingleWithHttpInfo(string language, int ankamaId, string game, int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsSingle");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsSingle");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("ankama_id", Dofusdude.Api.Client.ClientUtils.ParameterToString(ankamaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Equipment>("/{game}/v1/{language}/items/cosmetics/{ankama_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single Cosmetics Retrieve a specific cosmetic item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Equipment</returns>
        public async System.Threading.Tasks.Task<Equipment> GetCosmeticsSingleAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<Equipment> localVarResponse = await GetCosmeticsSingleWithHttpInfoAsync(language, ankamaId, game, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Cosmetics Retrieve a specific cosmetic item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game">game main &#39;dofus3&#39; or beta channel &#39;dofus3beta&#39;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Equipment)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Equipment>> GetCosmeticsSingleWithHttpInfoAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling CosmeticsApi->GetCosmeticsSingle");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling CosmeticsApi->GetCosmeticsSingle");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("ankama_id", Dofusdude.Api.Client.ClientUtils.ParameterToString(ankamaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "CosmeticsApi.GetCosmeticsSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Equipment>("/{game}/v1/{language}/items/cosmetics/{ankama_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCosmeticsSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
