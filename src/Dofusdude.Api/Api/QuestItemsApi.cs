/*
 * dofusdude
 *
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [PHP](https://github.com/dofusdude/dofusdude-php) - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 0.9.1
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dofusdude.Api.Client;
using Dofusdude.Api.Model;

namespace Dofusdude.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List All Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemsListPaged</returns>
        ItemsListPaged GetAllItemsQuestList(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0);

        /// <summary>
        /// List All Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemsListPaged</returns>
        ApiResponse<ItemsListPaged> GetAllItemsQuestListWithHttpInfo(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0);
        /// <summary>
        /// Single Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a specific quest item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Resource</returns>
        Resource GetItemQuestSingle(string language, int ankamaId, string game, int operationIndex = 0);

        /// <summary>
        /// Single Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a specific quest item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Resource</returns>
        ApiResponse<Resource> GetItemQuestSingleWithHttpInfo(string language, int ankamaId, string game, int operationIndex = 0);
        /// <summary>
        /// List Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a list of quest items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemsListPaged</returns>
        ItemsListPaged GetItemsQuestList(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// List Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a list of quest items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemsListPaged</returns>
        ApiResponse<ItemsListPaged> GetItemsQuestListWithHttpInfo(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Search Quest Items
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of quest items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ItemListEntry&gt;</returns>
        List<ItemListEntry> GetItemsQuestSearch(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Search Quest Items
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of quest items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ItemListEntry&gt;</returns>
        ApiResponse<List<ItemListEntry>> GetItemsQuestSearchWithHttpInfo(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List All Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemsListPaged</returns>
        System.Threading.Tasks.Task<ItemsListPaged> GetAllItemsQuestListAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List All Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemsListPaged)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsListPaged>> GetAllItemsQuestListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Single Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a specific quest item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Resource</returns>
        System.Threading.Tasks.Task<Resource> GetItemQuestSingleAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Single Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a specific quest item with id.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resource>> GetItemQuestSingleWithHttpInfoAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a list of quest items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemsListPaged</returns>
        System.Threading.Tasks.Task<ItemsListPaged> GetItemsQuestListAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Quest Items
        /// </summary>
        /// <remarks>
        /// Retrieve a list of quest items.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemsListPaged)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsListPaged>> GetItemsQuestListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search Quest Items
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of quest items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ItemListEntry&gt;</returns>
        System.Threading.Tasks.Task<List<ItemListEntry>> GetItemsQuestSearchAsync(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search Quest Items
        /// </summary>
        /// <remarks>
        /// Search in all names and descriptions of quest items with a query.
        /// </remarks>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ItemListEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemListEntry>>> GetItemsQuestSearchWithHttpInfoAsync(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestItemsApi : IQuestItemsApiSync, IQuestItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestItemsApi : IQuestItemsApi
    {
        private Dofusdude.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestItemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestItemsApi(string basePath)
        {
            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                new Dofusdude.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestItemsApi(Dofusdude.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dofusdude.Api.Client.Configuration.MergeConfigurations(
                Dofusdude.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dofusdude.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QuestItemsApi(Dofusdude.Api.Client.ISynchronousClient client, Dofusdude.Api.Client.IAsynchronousClient asyncClient, Dofusdude.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dofusdude.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dofusdude.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dofusdude.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dofusdude.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dofusdude.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List All Quest Items Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemsListPaged</returns>
        public ItemsListPaged GetAllItemsQuestList(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<ItemsListPaged> localVarResponse = GetAllItemsQuestListWithHttpInfo(language, game, sortLevel, filterTypeName, filterMinLevel, filterMaxLevel, acceptEncoding);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Quest Items Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemsListPaged</returns>
        public Dofusdude.Api.Client.ApiResponse<ItemsListPaged> GetAllItemsQuestListWithHttpInfo(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetAllItemsQuestList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetAllItemsQuestList");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", Dofusdude.Api.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetAllItemsQuestList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ItemsListPaged>("/{game}/{language}/items/quest/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllItemsQuestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Quest Items Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemsListPaged</returns>
        public async System.Threading.Tasks.Task<ItemsListPaged> GetAllItemsQuestListAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<ItemsListPaged> localVarResponse = await GetAllItemsQuestListWithHttpInfoAsync(language, game, sortLevel, filterTypeName, filterMinLevel, filterMaxLevel, acceptEncoding, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Quest Items Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]&#x3D;-1) and all fields[type] set.  If you want everything unfiltered, delete the other query parameters.  Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!  Tip: set the HTTP Header &#39;Accept-Encoding: gzip&#39; for saving bandwidth. You will need to uncompress it on your end. Example with cURL: &#x60;&#x60;&#x60; curl -sH &#39;Accept-Encoding: gzip&#39; &lt;api-endpoint&gt; | gunzip - &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="acceptEncoding">optional compression for saving bandwidth (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemsListPaged)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<ItemsListPaged>> GetAllItemsQuestListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), string? acceptEncoding = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetAllItemsQuestList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetAllItemsQuestList");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", Dofusdude.Api.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetAllItemsQuestList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ItemsListPaged>("/{game}/{language}/items/quest/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllItemsQuestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single Quest Items Retrieve a specific quest item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Resource</returns>
        public Resource GetItemQuestSingle(string language, int ankamaId, string game, int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<Resource> localVarResponse = GetItemQuestSingleWithHttpInfo(language, ankamaId, game);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Quest Items Retrieve a specific quest item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Resource</returns>
        public Dofusdude.Api.Client.ApiResponse<Resource> GetItemQuestSingleWithHttpInfo(string language, int ankamaId, string game, int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemQuestSingle");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemQuestSingle");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("ankama_id", Dofusdude.Api.Client.ClientUtils.ParameterToString(ankamaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemQuestSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Resource>("/{game}/{language}/items/quest/{ankama_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemQuestSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single Quest Items Retrieve a specific quest item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Resource</returns>
        public async System.Threading.Tasks.Task<Resource> GetItemQuestSingleAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<Resource> localVarResponse = await GetItemQuestSingleWithHttpInfoAsync(language, ankamaId, game, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single Quest Items Retrieve a specific quest item with id.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="ankamaId">identifier</param>
        /// <param name="game"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<Resource>> GetItemQuestSingleWithHttpInfoAsync(string language, int ankamaId, string game, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemQuestSingle");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemQuestSingle");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("ankama_id", Dofusdude.Api.Client.ClientUtils.ParameterToString(ankamaId)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemQuestSingle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Resource>("/{game}/{language}/items/quest/{ankama_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemQuestSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Quest Items Retrieve a list of quest items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemsListPaged</returns>
        public ItemsListPaged GetItemsQuestList(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<ItemsListPaged> localVarResponse = GetItemsQuestListWithHttpInfo(language, game, sortLevel, filterTypeName, filterMinLevel, filterMaxLevel, pageSize, pageNumber, fieldsItem, filterTypeEnum);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Quest Items Retrieve a list of quest items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemsListPaged</returns>
        public Dofusdude.Api.Client.ApiResponse<ItemsListPaged> GetItemsQuestListWithHttpInfo(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemsQuestList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemsQuestList");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[size]", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[number]", pageNumber));
            }
            if (fieldsItem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "fields[item]", fieldsItem));
            }
            if (filterTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type_enum]", filterTypeEnum));
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemsQuestList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ItemsListPaged>("/{game}/{language}/items/quest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsQuestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Quest Items Retrieve a list of quest items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemsListPaged</returns>
        public async System.Threading.Tasks.Task<ItemsListPaged> GetItemsQuestListAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<ItemsListPaged> localVarResponse = await GetItemsQuestListWithHttpInfoAsync(language, game, sortLevel, filterTypeName, filterMinLevel, filterMaxLevel, pageSize, pageNumber, fieldsItem, filterTypeEnum, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Quest Items Retrieve a list of quest items.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="sortLevel">sort the resulting list by level, default unsorted (optional)</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="pageSize">size of the results from the list. -1 disables pagination and gets all in one response. (optional)</param>
        /// <param name="pageNumber">page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16. (optional)</param>
        /// <param name="fieldsItem">adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed. (optional)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemsListPaged)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<ItemsListPaged>> GetItemsQuestListWithHttpInfoAsync(string language, string game, string? sortLevel = default(string?), string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? pageSize = default(int?), int? pageNumber = default(int?), List<string>? fieldsItem = default(List<string>?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemsQuestList");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemsQuestList");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            if (sortLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "sort[level]", sortLevel));
            }
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[size]", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "page[number]", pageNumber));
            }
            if (fieldsItem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "fields[item]", fieldsItem));
            }
            if (filterTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type_enum]", filterTypeEnum));
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemsQuestList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ItemsListPaged>("/{game}/{language}/items/quest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsQuestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Quest Items Search in all names and descriptions of quest items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ItemListEntry&gt;</returns>
        public List<ItemListEntry> GetItemsQuestSearch(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0)
        {
            Dofusdude.Api.Client.ApiResponse<List<ItemListEntry>> localVarResponse = GetItemsQuestSearchWithHttpInfo(language, game, query, filterTypeName, filterMinLevel, filterMaxLevel, limit, filterTypeEnum);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quest Items Search in all names and descriptions of quest items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ItemListEntry&gt;</returns>
        public Dofusdude.Api.Client.ApiResponse<List<ItemListEntry>> GetItemsQuestSearchWithHttpInfo(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemsQuestSearch");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemsQuestSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling QuestItemsApi->GetItemsQuestSearch");
            }

            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type_enum]", filterTypeEnum));
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemsQuestSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ItemListEntry>>("/{game}/{language}/items/quest/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsQuestSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Quest Items Search in all names and descriptions of quest items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ItemListEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemListEntry>> GetItemsQuestSearchAsync(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Dofusdude.Api.Client.ApiResponse<List<ItemListEntry>> localVarResponse = await GetItemsQuestSearchWithHttpInfoAsync(language, game, query, filterTypeName, filterMinLevel, filterMaxLevel, limit, filterTypeEnum, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Quest Items Search in all names and descriptions of quest items with a query.
        /// </summary>
        /// <exception cref="Dofusdude.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">a valid language code</param>
        /// <param name="game"></param>
        /// <param name="query">case sensitive search query</param>
        /// <param name="filterTypeName">only results with the translated type name (optional)</param>
        /// <param name="filterMinLevel">only results which level is equal or above this value (optional)</param>
        /// <param name="filterMaxLevel">only results which level is equal or below this value (optional)</param>
        /// <param name="limit">maximum number of returned results (optional, default to 8)</param>
        /// <param name="filterTypeEnum">multi-filter results with the english type name. Add with \&quot;wood\&quot; or \&quot;+wood\&quot; and exclude with \&quot;-wood\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ItemListEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<Dofusdude.Api.Client.ApiResponse<List<ItemListEntry>>> GetItemsQuestSearchWithHttpInfoAsync(string language, string game, string query, string? filterTypeName = default(string?), int? filterMinLevel = default(int?), int? filterMaxLevel = default(int?), int? limit = default(int?), List<string>? filterTypeEnum = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'language' when calling QuestItemsApi->GetItemsQuestSearch");
            }

            // verify the required parameter 'game' is set
            if (game == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'game' when calling QuestItemsApi->GetItemsQuestSearch");
            }

            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new Dofusdude.Api.Client.ApiException(400, "Missing required parameter 'query' when calling QuestItemsApi->GetItemsQuestSearch");
            }


            Dofusdude.Api.Client.RequestOptions localVarRequestOptions = new Dofusdude.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dofusdude.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dofusdude.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("language", Dofusdude.Api.Client.ClientUtils.ParameterToString(language)); // path parameter
            localVarRequestOptions.PathParameters.Add("game", Dofusdude.Api.Client.ClientUtils.ParameterToString(game)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (filterTypeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[type_name]", filterTypeName));
            }
            if (filterMinLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[min_level]", filterMinLevel));
            }
            if (filterMaxLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "filter[max_level]", filterMaxLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Dofusdude.Api.Client.ClientUtils.ParameterToMultiMap("csv", "filter[type_enum]", filterTypeEnum));
            }

            localVarRequestOptions.Operation = "QuestItemsApi.GetItemsQuestSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ItemListEntry>>("/{game}/{language}/items/quest/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemsQuestSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
