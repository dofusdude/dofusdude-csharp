/*
 * dofusdude
 *
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [PHP](https://github.com/dofusdude/dofusdude-php) - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dofusdude.Api.Client.OpenAPIDateConverter;

namespace Dofusdude.Api.Model
{
    /// <summary>
    /// Equipment
    /// </summary>
    [DataContract(Name = "Equipment")]
    public partial class Equipment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Equipment" /> class.
        /// </summary>
        /// <param name="ankamaId">ankamaId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="isWeapon">isWeapon.</param>
        /// <param name="level">level.</param>
        /// <param name="pods">pods.</param>
        /// <param name="imageUrls">imageUrls.</param>
        /// <param name="effects">effects.</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="conditionTree">conditionTree.</param>
        /// <param name="recipe">recipe.</param>
        /// <param name="parentSet">parentSet.</param>
        public Equipment(int ankamaId = default(int), string name = default(string), string description = default(string), ItemsListEntryTypedType type = default(ItemsListEntryTypedType), bool isWeapon = default(bool), int level = default(int), int pods = default(int), ImageUrls imageUrls = default(ImageUrls), List<EffectsEntry> effects = default(List<EffectsEntry>), List<ConditionEntry> conditions = default(List<ConditionEntry>), ConditionTreeNode conditionTree = default(ConditionTreeNode), List<RecipeEntry> recipe = default(List<RecipeEntry>), ItemListEntryParentSet parentSet = default(ItemListEntryParentSet))
        {
            this.AnkamaId = ankamaId;
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.IsWeapon = isWeapon;
            this.Level = level;
            this.Pods = pods;
            this.ImageUrls = imageUrls;
            this.Effects = effects;
            this.Conditions = conditions;
            this.ConditionTree = conditionTree;
            this.Recipe = recipe;
            this.ParentSet = parentSet;
        }

        /// <summary>
        /// Gets or Sets AnkamaId
        /// </summary>
        [DataMember(Name = "ankama_id", EmitDefaultValue = false)]
        public int AnkamaId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ItemsListEntryTypedType Type { get; set; }

        /// <summary>
        /// Gets or Sets IsWeapon
        /// </summary>
        [DataMember(Name = "is_weapon", EmitDefaultValue = true)]
        public bool IsWeapon { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Pods
        /// </summary>
        [DataMember(Name = "pods", EmitDefaultValue = false)]
        public int Pods { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrls
        /// </summary>
        [DataMember(Name = "image_urls", EmitDefaultValue = false)]
        public ImageUrls ImageUrls { get; set; }

        /// <summary>
        /// Gets or Sets Effects
        /// </summary>
        [DataMember(Name = "effects", EmitDefaultValue = true)]
        public List<EffectsEntry> Effects { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        [Obsolete]
        public List<ConditionEntry> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets ConditionTree
        /// </summary>
        [DataMember(Name = "condition_tree", EmitDefaultValue = false)]
        public ConditionTreeNode ConditionTree { get; set; }

        /// <summary>
        /// Gets or Sets Recipe
        /// </summary>
        [DataMember(Name = "recipe", EmitDefaultValue = true)]
        public List<RecipeEntry> Recipe { get; set; }

        /// <summary>
        /// Gets or Sets ParentSet
        /// </summary>
        [DataMember(Name = "parent_set", EmitDefaultValue = true)]
        public ItemListEntryParentSet ParentSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Equipment {\n");
            sb.Append("  AnkamaId: ").Append(AnkamaId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsWeapon: ").Append(IsWeapon).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Pods: ").Append(Pods).Append("\n");
            sb.Append("  ImageUrls: ").Append(ImageUrls).Append("\n");
            sb.Append("  Effects: ").Append(Effects).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  ConditionTree: ").Append(ConditionTree).Append("\n");
            sb.Append("  Recipe: ").Append(Recipe).Append("\n");
            sb.Append("  ParentSet: ").Append(ParentSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
