/*
 * dofusdude
 *
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js - -save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts - -save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.6
 * Contact: stelzo@steado.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Dofusdude.Api.Model;
using Dofusdude.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Dofusdude.Api.Test.Model
{
    /// <summary>
    ///  Class for testing Weapon
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class WeaponTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Weapon
        //private Weapon instance;

        public WeaponTests()
        {
            // TODO uncomment below to create an instance of Weapon
            //instance = new Weapon();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Weapon
        /// </summary>
        [Fact]
        public void WeaponInstanceTest()
        {
            // TODO uncomment below to test "IsType" Weapon
            //Assert.IsType<Weapon>(instance);
        }

        /// <summary>
        /// Test the property 'AnkamaId'
        /// </summary>
        [Fact]
        public void AnkamaIdTest()
        {
            // TODO unit test for the property 'AnkamaId'
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

        /// <summary>
        /// Test the property 'IsWeapon'
        /// </summary>
        [Fact]
        public void IsWeaponTest()
        {
            // TODO unit test for the property 'IsWeapon'
        }

        /// <summary>
        /// Test the property 'Level'
        /// </summary>
        [Fact]
        public void LevelTest()
        {
            // TODO unit test for the property 'Level'
        }

        /// <summary>
        /// Test the property 'Pods'
        /// </summary>
        [Fact]
        public void PodsTest()
        {
            // TODO unit test for the property 'Pods'
        }

        /// <summary>
        /// Test the property 'ImageUrls'
        /// </summary>
        [Fact]
        public void ImageUrlsTest()
        {
            // TODO unit test for the property 'ImageUrls'
        }

        /// <summary>
        /// Test the property 'Effects'
        /// </summary>
        [Fact]
        public void EffectsTest()
        {
            // TODO unit test for the property 'Effects'
        }

        /// <summary>
        /// Test the property 'Conditions'
        /// </summary>
        [Fact]
        public void ConditionsTest()
        {
            // TODO unit test for the property 'Conditions'
        }

        /// <summary>
        /// Test the property 'CriticalHitProbability'
        /// </summary>
        [Fact]
        public void CriticalHitProbabilityTest()
        {
            // TODO unit test for the property 'CriticalHitProbability'
        }

        /// <summary>
        /// Test the property 'CriticalHitBonus'
        /// </summary>
        [Fact]
        public void CriticalHitBonusTest()
        {
            // TODO unit test for the property 'CriticalHitBonus'
        }

        /// <summary>
        /// Test the property 'MaxCastPerTurn'
        /// </summary>
        [Fact]
        public void MaxCastPerTurnTest()
        {
            // TODO unit test for the property 'MaxCastPerTurn'
        }

        /// <summary>
        /// Test the property 'ApCost'
        /// </summary>
        [Fact]
        public void ApCostTest()
        {
            // TODO unit test for the property 'ApCost'
        }

        /// <summary>
        /// Test the property 'Range'
        /// </summary>
        [Fact]
        public void RangeTest()
        {
            // TODO unit test for the property 'Range'
        }

        /// <summary>
        /// Test the property 'Recipe'
        /// </summary>
        [Fact]
        public void RecipeTest()
        {
            // TODO unit test for the property 'Recipe'
        }

        /// <summary>
        /// Test the property 'ParentSet'
        /// </summary>
        [Fact]
        public void ParentSetTest()
        {
            // TODO unit test for the property 'ParentSet'
        }
    }
}
